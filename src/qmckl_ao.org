# -*- mode: org -*-
# vim: syntax=c
#+TITLE: Atomic Orbitals

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

This files contains all the routines for the computation of the
values, gradients and Laplacian of the atomic basis functions.

4 files are produced:
- a header file : =qmckl_ao.h=
- a source file : =qmckl_ao.f90=
- a C test file : =test_qmckl_ao.c=
- a Fortran test file : =test_qmckl_ao_f.f90=

*** Header                                                         :noexport:
    #+BEGIN_SRC C :comments link  :tangle qmckl_ao.h
#ifndef QMCKL_AO_H
#define QMCKL_AO_H
#include "qmckl_context.h"
#include "qmckl_distance.h"
    #+END_SRC

*** Test                                                           :noexport:
    #+BEGIN_SRC C :comments link :tangle test_qmckl_ao.c
#include <math.h>
#include "qmckl.h"
#include "munit.h"
MunitResult test_qmckl_ao() {
  qmckl_context context;
  context = qmckl_context_create();
    #+END_SRC


* Polynomials

  \[
  P_l(\mathbf{r},\mathbf{R}_i)  =   (x-X_i)^a (y-Y_i)^b (z-Z_i)^c 
  \]
  \begin{eqnarray*} 
  \frac{\partial }{\partial x} P_l\left(\mathbf{r},\mathbf{R}_i \right) & = & a (x-X_i)^{a-1} (y-Y_i)^b (z-Z_i)^c \\
  \frac{\partial }{\partial y} P_l\left(\mathbf{r},\mathbf{R}_i \right) & = & b (x-X_i)^a (y-Y_i)^{b-1} (z-Z_i)^c \\
  \frac{\partial }{\partial z} P_l\left(\mathbf{r},\mathbf{R}_i \right) & = & c (x-X_i)^a (y-Y_i)^b (z-Z_i)^{c-1} \\
  \end{eqnarray*} 
  \begin{eqnarray*} 
  \left( \frac{\partial }{\partial x^2} + 
             \frac{\partial }{\partial y^2} + 
             \frac{\partial }{\partial z^2} \right) P_l
             \left(\mathbf{r},\mathbf{R}_i \right) &  = &  
           a(a-1) (x-X_i)^{a-2} (y-Y_i)^b (z-Z_i)^c + \\
        && b(b-1) (x-X_i)^a (y-Y_i)^{b-1} (z-Z_i)^c + \\
        && c(c-1) (x-X_i)^a (y-Y_i)^b (z-Z_i)^{c-1} 
  \end{eqnarray*}

** =qmckl_ao_powers=

   Computes all the powers of the =n= input data up to the given
   maximum value given in input for each of the $n$ points:
   
   \[ P_{ij} = X_j^i \]

*** Arguments

    | =context=  | input  | Global state                                      |
    | =n=        | input  | Number of values                                  |
    | =X(n)=     | input  | Array containing the input values                 |
    | =LMAX(n)=  | input  | Array containing the maximum power for each value |
    | =P(LDP,n)= | output | Array containing all the powers of =X=            |
    | =LDP=      | input  | Leading dimension of array =P=                    |
    
*** Requirements

    - =context= is not 0
    - =n= > 0
    - =X= is allocated with at least $n \times 8$ bytes
    - =LMAX= is allocated with at least $n \times 4$ bytes
    - =P= is allocated with at least $n \times \max_i \text{LMAX}_i \times 8$ bytes
    - =LDP= >= $\max_i$ =LMAX[i]=

*** Header
    #+BEGIN_SRC C :comments link :tangle qmckl_ao.h
qmckl_exit_code qmckl_ao_powers(const qmckl_context context,
                const int64_t n, 
                const double *X, const int32_t *LMAX,
                const double *P, const int64_t LDP);
    #+END_SRC
    
*** Source
    #+BEGIN_SRC f90 :comments link :tangle qmckl_ao.f90
integer function qmckl_ao_powers_f(context, n, X, LMAX, P, ldp) result(info)
  implicit none
  integer*8 , intent(in)  :: context
  integer*8 , intent(in)  :: n
  real*8    , intent(in)  :: X(n)
  integer   , intent(in)  :: LMAX(n)
  real*8    , intent(out) :: P(ldp,n)
  integer*8 , intent(in)  :: ldp

  integer*8  :: i,j

  info = 0

  if (context == 0_8) then
     info = -1
     return
  endif
  
  if (LDP < MAXVAL(LMAX)) then
     info = -2
     return
  endif
  
  do j=1,n
    P(1,j) = X(j)
    do i=2,LMAX(j)
       P(i,j) = P(i-1,j) * X(j) 
    end do
  end do

end function qmckl_ao_powers_f
    #+END_SRC 

*** C interface                                                    :noexport:
    #+BEGIN_SRC f90 :comments link :tangle qmckl_ao.f90
integer(c_int32_t) function qmckl_ao_powers(context, n, X, LMAX, P, ldp) &
     bind(C) result(info)
  use, intrinsic :: iso_c_binding
  implicit none
  integer (c_int64_t) , intent(in) , value :: context
  integer (c_int64_t) , intent(in) , value :: n
  real    (c_double)  , intent(in)         :: X(n)
  integer (c_int32_t) , intent(in)         :: LMAX(n)
  real    (c_double)  , intent(out)        :: P(ldp,n)
  integer (c_int64_t) , intent(in) , value :: ldp
  
  integer, external :: qmckl_ao_powers_f
  info = qmckl_ao_powers_f(context, n, X, LMAX, P, ldp)
end function qmckl_ao_powers
    #+END_SRC

    #+BEGIN_SRC f90 :comments link :tangle qmckl_ao.fh
  interface
     integer(c_int32_t) function qmckl_ao_powers(context, n, X, LMAX, P, ldp) bind(C)
       use, intrinsic :: iso_c_binding
       integer (c_int64_t) , intent(in) , value :: context
       integer (c_int64_t) , intent(in) , value :: n
       integer (c_int64_t) , intent(in) , value :: ldp
       real    (c_double)  , intent(in)         :: X(n)
       integer (c_int32_t) , intent(in)         :: LMAX(n)
       real    (c_double)  , intent(out)        :: P(ldp,n)
     end function qmckl_ao_powers
  end interface
    #+END_SRC
  
*** Test                                                           :noexport:
    #+BEGIN_SRC f90 :comments link :tangle test_qmckl_ao_f.f90
integer(c_int32_t) function test_qmckl_ao_powers(context) bind(C)
  use, intrinsic :: iso_c_binding
  implicit none
  include 'qmckl_ao.fh'

  integer(c_int64_t), intent(in), value :: context
  
  integer*8                     :: n, LDP 
  integer, allocatable          :: LMAX(:) 
  double precision, allocatable :: X(:), P(:,:)
  integer*8                     :: i,j
  
  n = 100;
  LDP = 10;
  
  allocate(X(n), P(LDP,n), LMAX(n))
  
  do j=1,n
     X(j) = -5.d0 + 0.1d0 * dble(j)
     LMAX(j) = 1 + int(mod(j, 9),4)
  end do
  
  test_qmckl_ao_powers = qmckl_ao_powers(context, n, X, LMAX, P, LDP) 
  if (test_qmckl_ao_powers /= 0) return
  
  test_qmckl_ao_powers = -1
  
  do j=1,n
     do i=1,LMAX(j)
        if ( dabs(1.d0 - P(i,j) / (X(j)**i)) > 1.d-14 ) return
     end do
  end do

  test_qmckl_ao_powers = 0
  deallocate(X,P,LMAX)
end function test_qmckl_ao_powers
    #+END_SRC

    #+BEGIN_SRC C :comments link :tangle test_qmckl_ao.c
int  test_qmckl_ao_powers(qmckl_context context);
munit_assert_int(0, ==, test_qmckl_ao_powers(context));
    #+END_SRC
  
** =qmckl_ao_polynomial_vgl=
   
   Computes the values, gradients and Laplacians at a given point of
   all polynomials with an angular momentum up to =lmax=.

*** Arguments

    | =context=    | input  | Global state                                         |
    | =X(3)=       | input  | Array containing the coordinates of the points       |
    | =R(3)=       | input  | Array containing the x,y,z coordinates of the center |
    | =lmax=       | input  | Maximum angular momentum                             |
    | =n=          | output | Number of computed polynomials                       |
    | =L(ldl,n)=   | output | Contains a,b,c for all =n= results                   |
    | =ldl=        | input  | Leading dimension of =L=                             |
    | =VGL(ldv,n)= | output | Value, gradients and Laplacian of the polynomials    |
    | =ldv=        | input  | Leading dimension of array =VGL=                     |
    
*** Requirements

    - =context= is not 0
    - =n= > 0
    - =X= is allocated with at least $3 \times 8$ bytes
    - =R= is allocated with at least $3 \times 8$ bytes
    - =lmax= >= 0
    - On output, =n= should be equal to (=lmax=+1)(=lmax=+2)(=lmax=+3)/6
    - =L= is allocated with at least $3 \times n \times 4$ bytes
    - =ldl= >= 3
    - =VGL= is allocated with at least $5 \times n \times 8$ bytes
    - =ldv= >= 5

*** Header
    #+BEGIN_SRC C :comments link :tangle qmckl_ao.h
qmckl_exit_code qmckl_ao_polynomial_vgl(const qmckl_context context,
                const double *X, const double *R,
                const int32_t lmax, const int64_t *n,
                const int32_t *L,   const int64_t ldl,
                const double *VGL,  const  int64_t ldv);
    #+END_SRC
    
*** Source
    #+BEGIN_SRC f90 :comments link :tangle qmckl_ao.f90
integer function qmckl_ao_polynomial_vgl_f(context, X, R, lmax, n, L, ldl, VGL, ldv) result(info)
  implicit none
  integer*8 , intent(in)  :: context
  real*8    , intent(in)  :: X(3), R(3)
  integer   , intent(in)  :: lmax
  integer*8 , intent(out) :: n
  integer   , intent(out) :: L(ldl,(lmax+1)*(lmax+2)*(lmax+3)/6)
  integer*8 , intent(in)  :: ldl
  real*8    , intent(out) :: VGL(ldv,(lmax+1)*(lmax+2)*(lmax+3)/6)
  integer*8 , intent(in)  :: ldv

  integer*8         :: i,j
  integer           :: a,b,c,d
  real*8            :: Y(3)
  integer           :: lmax_array(3)
  real*8            :: pows(-2:lmax,3)
  integer, external :: qmckl_ao_powers_f
  double precision  :: xy, yz, xz
  double precision  :: da, db, dc, dd
  
  info = 0
  
  if (context == 0_8) then
     info = -1
     return
  endif
  
  n = (lmax+1)*(lmax+2)*(lmax+3)/6
  
  if (ldl < 3) then
     info = -2
     return
  endif
  
  if (ldv < 5) then
     info = -3
     return
  endif
  
  
  do i=1,3
     Y(i) = X(i) - R(i)
  end do
  pows(-2:-1,1:3) = 0.d0
  pows(0,1:3) = 1.d0
  lmax_array(1:3) = lmax
  info = qmckl_ao_powers_f(context, 1_8, Y(1), (/lmax/), pows(1,1), size(pows,1,kind=8)) 
  if (info /= 0) return
  info = qmckl_ao_powers_f(context, 1_8, Y(2), (/lmax/), pows(1,2), size(pows,1,kind=8)) 
  if (info /= 0) return
  info = qmckl_ao_powers_f(context, 1_8, Y(3), (/lmax/), pows(1,3), size(pows,1,kind=8)) 
  if (info /= 0) return


  n=1
  vgl(1:5,1:n) = 0.d0
  l(1:3,n) = 0
  vgl(1,n) = 1.d0
  dd = 1.d0
  do d=1,lmax
     da = 0.d0
     do a=0,d
        db = 0.d0
        do b=0,d-a
           c  = d  - a  - b
           dc = dd - da - db
           n = n+1
           l(1,n) = a
           l(2,n) = b
           l(3,n) = c
           
           xy = pows(a,1) * pows(b,2)
           yz = pows(b,2) * pows(c,3)
           xz = pows(a,1) * pows(c,3)
           
           vgl(1,n) = xy * pows(c,3)
           
           xy = dc * xy
           xz = db * xz
           yz = da * yz
           
           vgl(2,n) = pows(a-1,1) * yz
           vgl(3,n) = pows(b-1,2) * xz
           vgl(4,n) = pows(c-1,3) * xy
           
           vgl(5,n) = &
                (da-1.d0) * pows(a-2,1) * yz + &
                (db-1.d0) * pows(b-2,2) * xz + &
                (dc-1.d0) * pows(c-2,3) * xy

           db = db + 1.d0
        end do
        da = da + 1.d0
     end do
     dd = dd + 1.d0
  end do

end function qmckl_ao_polynomial_vgl_f
    #+END_SRC 

*** C interface                                                    :noexport:
    #+BEGIN_SRC f90 :comments link :tangle qmckl_ao.f90
integer(c_int32_t) function qmckl_ao_polynomial_vgl(context, X, R, lmax, n, L, ldl, VGL, ldv) &
     bind(C) result(info)
  use, intrinsic :: iso_c_binding
  implicit none
  integer (c_int64_t) , intent(in) , value :: context
  real    (c_double)  , intent(in)         :: X(3), R(3)
  integer (c_int32_t) , intent(in) , value :: lmax
  integer (c_int64_t) , intent(out)        :: n
  integer (c_int32_t) , intent(out)        :: L(ldl,(lmax+1)*(lmax+2)*(lmax+3)/6)
  integer (c_int64_t) , intent(in) , value :: ldl
  real    (c_double)  , intent(out)        :: VGL(ldv,(lmax+1)*(lmax+2)*(lmax+3)/6)
  integer (c_int64_t) , intent(in) , value :: ldv

  integer, external :: qmckl_ao_polynomial_vgl_f
  info = qmckl_ao_polynomial_vgl_f(context, X, R, lmax, n, L, ldl, VGL, ldv) 
end function qmckl_ao_polynomial_vgl
    #+END_SRC

    #+BEGIN_SRC f90 :comments link :tangle qmckl_ao.fh
  interface
     integer(c_int32_t) function qmckl_ao_polynomial_vgl(context, X, R, lmax, n, L, ldl, VGL, ldv) &
          bind(C) 
       use, intrinsic :: iso_c_binding
       integer (c_int64_t) , intent(in) , value :: context
       integer (c_int32_t) , intent(in) , value :: lmax
       integer (c_int64_t) , intent(in) , value :: ldl
       integer (c_int64_t) , intent(in) , value :: ldv
       real    (c_double)  , intent(in)         :: X(3), R(3)
       integer (c_int64_t) , intent(out)        :: n
       integer (c_int32_t) , intent(out)        :: L(ldl,(lmax+1)*(lmax+2)*(lmax+3)/6)
       real    (c_double)  , intent(out)        :: VGL(ldv,(lmax+1)*(lmax+2)*(lmax+3)/6)
     end function qmckl_ao_polynomial_vgl
  end interface
    #+END_SRC
*** Test                                                           :noexport:
    #+BEGIN_SRC f90 :comments link :tangle test_qmckl_ao_f.f90
integer(c_int32_t) function test_qmckl_ao_polynomial_vgl(context) bind(C)
  use, intrinsic :: iso_c_binding
  implicit none
  include 'qmckl_ao.fh'

  integer(c_int64_t), intent(in), value :: context
  
  integer                       :: lmax, d, i
  integer, allocatable          :: L(:,:)
  integer*8                     :: n, ldl, ldv, j
  double precision              :: X(3), R(3), Y(3)
  double precision, allocatable :: VGL(:,:)
  double precision              :: w

  X = (/ 1.1 , 2.2 ,  3.3 /)
  R = (/ 0.1 , 1.2 , -2.3 /)
  Y(:) = X(:) - R(:)

  lmax = 4;
  n = 0;
  ldl = 3;
  ldv = 100;

  d = (lmax+1)*(lmax+2)*(lmax+3)/6

  allocate (L(ldl,100), VGL(ldv,100))

  test_qmckl_ao_polynomial_vgl = &
       qmckl_ao_polynomial_vgl(context, X, R, lmax, n, L, ldl, VGL, ldv)
  if (test_qmckl_ao_polynomial_vgl /= 0) return

  test_qmckl_ao_polynomial_vgl = -1

  if (n /= d) return 

  do j=1,n
     do i=1,3
        if (L(i,j) < 0) return
     end do
     if (dabs(1.d0 - VGL(1,j) / (&
          Y(1)**L(1,j) * Y(2)**L(2,j) * Y(3)**L(3,j)  &
          )) > 1.d-14 ) return

     if (L(1,j) < 1) then
        if (VGL(2,j) /= 0.d0) return
     else
        if (dabs(1.d0 - VGL(2,j) / (&
             L(1,j) * Y(1)**(L(1,j)-1) * Y(2)**L(2,j) * Y(3)**L(3,j) &
             )) > 1.d-14 ) return
     end if

     if (L(2,j) < 1) then
        if (VGL(3,j) /= 0.d0) return
     else
        if (dabs(1.d0 - VGL(3,j) / (&
             L(2,j) * Y(1)**L(1,j) * Y(2)**(L(2,j)-1) * Y(3)**L(3,j) &
             )) > 1.d-14 ) return
     end if

     if (L(3,j) < 1) then
        if (VGL(4,j) /= 0.d0) return
     else
        if (dabs(1.d0 - VGL(4,j) / (&
             L(3,j) * Y(1)**L(1,j) * Y(2)**L(2,j) * Y(3)**(L(3,j)-1) &
             )) > 1.d-14 ) return
     end if
     
     w = 0.d0
     if (L(1,j) > 1) then
        w = w + L(1,j) * (L(1,j)-1) * Y(1)**(L(1,j)-2) * Y(2)**L(2,j) * Y(3)**L(3,j) 
     end if
     if (L(2,j) > 1) then
        w = w + L(2,j) * (L(2,j)-1) * Y(1)**L(1,j) * Y(2)**(L(2,j)-2) * Y(3)**L(3,j) 
     end if
     if (L(3,j) > 1) then
        w = w + L(3,j) * (L(3,j)-1) * Y(1)**L(1,j) * Y(2)**L(2,j) * Y(3)**(L(3,j)-2) 
     end if
     if (dabs(1.d0 - VGL(5,j) / w) > 1.d-14 ) return
  end do

  test_qmckl_ao_polynomial_vgl = 0
     
  deallocate(L,VGL)
end function test_qmckl_ao_polynomial_vgl
    #+END_SRC

    #+BEGIN_SRC C :comments link :tangle test_qmckl_ao.c
int  test_qmckl_ao_polynomial_vgl(qmckl_context context);
munit_assert_int(0, ==, test_qmckl_ao_polynomial_vgl(context));
    #+END_SRC
    #+END_SRC
   
    
* TODO Gaussian basis functions

* TODO Slater basis functions
  
* End of files                                                     :noexport:
  
*** Header
  #+BEGIN_SRC C :comments link :tangle qmckl_ao.h
#endif
  #+END_SRC

*** Test
  #+BEGIN_SRC C :comments link :tangle test_qmckl_ao.c
  if (qmckl_context_destroy(context) != QMCKL_SUCCESS)
    return QMCKL_FAILURE;
  return MUNIT_OK;
}

  #+END_SRC
